# coding: utf-8

"""
    OpenAPI

    tinkoff.ru/invest OpenAPI.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: n.v.melnikov@tinkoff.ru
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_genclient.configuration import Configuration


class PortfolioPosition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'figi': 'str',
        'ticker': 'str',
        'isin': 'str',
        'instrument_type': 'InstrumentType',
        'balance': 'float',
        'blocked': 'float',
        'expected_yield': 'MoneyAmount',
        'lots': 'int',
        'average_position_price': 'MoneyAmount',
        'average_position_price_no_nkd': 'MoneyAmount',
        'name': 'str'
    }

    attribute_map = {
        'figi': 'figi',
        'ticker': 'ticker',
        'isin': 'isin',
        'instrument_type': 'instrumentType',
        'balance': 'balance',
        'blocked': 'blocked',
        'expected_yield': 'expectedYield',
        'lots': 'lots',
        'average_position_price': 'averagePositionPrice',
        'average_position_price_no_nkd': 'averagePositionPriceNoNkd',
        'name': 'name'
    }

    def __init__(self, figi=None, ticker=None, isin=None, instrument_type=None, balance=None, blocked=None, expected_yield=None, lots=None, average_position_price=None, average_position_price_no_nkd=None, name=None, local_vars_configuration=None):  # noqa: E501
        """PortfolioPosition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._figi = None
        self._ticker = None
        self._isin = None
        self._instrument_type = None
        self._balance = None
        self._blocked = None
        self._expected_yield = None
        self._lots = None
        self._average_position_price = None
        self._average_position_price_no_nkd = None
        self._name = None
        self.discriminator = None

        self.figi = figi
        if ticker is not None:
            self.ticker = ticker
        if isin is not None:
            self.isin = isin
        self.instrument_type = instrument_type
        self.balance = balance
        if blocked is not None:
            self.blocked = blocked
        if expected_yield is not None:
            self.expected_yield = expected_yield
        self.lots = lots
        if average_position_price is not None:
            self.average_position_price = average_position_price
        if average_position_price_no_nkd is not None:
            self.average_position_price_no_nkd = average_position_price_no_nkd
        self.name = name

    @property
    def figi(self):
        """Gets the figi of this PortfolioPosition.  # noqa: E501


        :return: The figi of this PortfolioPosition.  # noqa: E501
        :rtype: str
        """
        return self._figi

    @figi.setter
    def figi(self, figi):
        """Sets the figi of this PortfolioPosition.


        :param figi: The figi of this PortfolioPosition.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and figi is None:  # noqa: E501
            raise ValueError("Invalid value for `figi`, must not be `None`")  # noqa: E501

        self._figi = figi

    @property
    def ticker(self):
        """Gets the ticker of this PortfolioPosition.  # noqa: E501


        :return: The ticker of this PortfolioPosition.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this PortfolioPosition.


        :param ticker: The ticker of this PortfolioPosition.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def isin(self):
        """Gets the isin of this PortfolioPosition.  # noqa: E501


        :return: The isin of this PortfolioPosition.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this PortfolioPosition.


        :param isin: The isin of this PortfolioPosition.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def instrument_type(self):
        """Gets the instrument_type of this PortfolioPosition.  # noqa: E501


        :return: The instrument_type of this PortfolioPosition.  # noqa: E501
        :rtype: InstrumentType
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this PortfolioPosition.


        :param instrument_type: The instrument_type of this PortfolioPosition.  # noqa: E501
        :type: InstrumentType
        """
        if self.local_vars_configuration.client_side_validation and instrument_type is None:  # noqa: E501
            raise ValueError("Invalid value for `instrument_type`, must not be `None`")  # noqa: E501

        self._instrument_type = instrument_type

    @property
    def balance(self):
        """Gets the balance of this PortfolioPosition.  # noqa: E501


        :return: The balance of this PortfolioPosition.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this PortfolioPosition.


        :param balance: The balance of this PortfolioPosition.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and balance is None:  # noqa: E501
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def blocked(self):
        """Gets the blocked of this PortfolioPosition.  # noqa: E501


        :return: The blocked of this PortfolioPosition.  # noqa: E501
        :rtype: float
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this PortfolioPosition.


        :param blocked: The blocked of this PortfolioPosition.  # noqa: E501
        :type: float
        """

        self._blocked = blocked

    @property
    def expected_yield(self):
        """Gets the expected_yield of this PortfolioPosition.  # noqa: E501


        :return: The expected_yield of this PortfolioPosition.  # noqa: E501
        :rtype: MoneyAmount
        """
        return self._expected_yield

    @expected_yield.setter
    def expected_yield(self, expected_yield):
        """Sets the expected_yield of this PortfolioPosition.


        :param expected_yield: The expected_yield of this PortfolioPosition.  # noqa: E501
        :type: MoneyAmount
        """

        self._expected_yield = expected_yield

    @property
    def lots(self):
        """Gets the lots of this PortfolioPosition.  # noqa: E501


        :return: The lots of this PortfolioPosition.  # noqa: E501
        :rtype: int
        """
        return self._lots

    @lots.setter
    def lots(self, lots):
        """Sets the lots of this PortfolioPosition.


        :param lots: The lots of this PortfolioPosition.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and lots is None:  # noqa: E501
            raise ValueError("Invalid value for `lots`, must not be `None`")  # noqa: E501

        self._lots = lots

    @property
    def average_position_price(self):
        """Gets the average_position_price of this PortfolioPosition.  # noqa: E501


        :return: The average_position_price of this PortfolioPosition.  # noqa: E501
        :rtype: MoneyAmount
        """
        return self._average_position_price

    @average_position_price.setter
    def average_position_price(self, average_position_price):
        """Sets the average_position_price of this PortfolioPosition.


        :param average_position_price: The average_position_price of this PortfolioPosition.  # noqa: E501
        :type: MoneyAmount
        """

        self._average_position_price = average_position_price

    @property
    def average_position_price_no_nkd(self):
        """Gets the average_position_price_no_nkd of this PortfolioPosition.  # noqa: E501


        :return: The average_position_price_no_nkd of this PortfolioPosition.  # noqa: E501
        :rtype: MoneyAmount
        """
        return self._average_position_price_no_nkd

    @average_position_price_no_nkd.setter
    def average_position_price_no_nkd(self, average_position_price_no_nkd):
        """Sets the average_position_price_no_nkd of this PortfolioPosition.


        :param average_position_price_no_nkd: The average_position_price_no_nkd of this PortfolioPosition.  # noqa: E501
        :type: MoneyAmount
        """

        self._average_position_price_no_nkd = average_position_price_no_nkd

    @property
    def name(self):
        """Gets the name of this PortfolioPosition.  # noqa: E501


        :return: The name of this PortfolioPosition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortfolioPosition.


        :param name: The name of this PortfolioPosition.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioPosition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortfolioPosition):
            return True

        return self.to_dict() != other.to_dict()
