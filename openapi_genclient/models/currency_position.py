# coding: utf-8

"""
    OpenAPI

    tinkoff.ru/invest OpenAPI.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: n.v.melnikov@tinkoff.ru
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_genclient.configuration import Configuration


class CurrencyPosition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'currency': 'Currency',
        'balance': 'float',
        'blocked': 'float'
    }

    attribute_map = {
        'currency': 'currency',
        'balance': 'balance',
        'blocked': 'blocked'
    }

    def __init__(self, currency=None, balance=None, blocked=None, local_vars_configuration=None):  # noqa: E501
        """CurrencyPosition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._currency = None
        self._balance = None
        self._blocked = None
        self.discriminator = None

        self.currency = currency
        self.balance = balance
        if blocked is not None:
            self.blocked = blocked

    @property
    def currency(self):
        """Gets the currency of this CurrencyPosition.  # noqa: E501


        :return: The currency of this CurrencyPosition.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CurrencyPosition.


        :param currency: The currency of this CurrencyPosition.  # noqa: E501
        :type: Currency
        """
        if self.local_vars_configuration.client_side_validation and currency is None:  # noqa: E501
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def balance(self):
        """Gets the balance of this CurrencyPosition.  # noqa: E501


        :return: The balance of this CurrencyPosition.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this CurrencyPosition.


        :param balance: The balance of this CurrencyPosition.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and balance is None:  # noqa: E501
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def blocked(self):
        """Gets the blocked of this CurrencyPosition.  # noqa: E501


        :return: The blocked of this CurrencyPosition.  # noqa: E501
        :rtype: float
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this CurrencyPosition.


        :param blocked: The blocked of this CurrencyPosition.  # noqa: E501
        :type: float
        """

        self._blocked = blocked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrencyPosition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CurrencyPosition):
            return True

        return self.to_dict() != other.to_dict()
